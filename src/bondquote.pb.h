// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bondquote.proto

#ifndef PROTOBUF_bondquote_2eproto__INCLUDED
#define PROTOBUF_bondquote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bondquote_2eproto();
void protobuf_AssignDesc_bondquote_2eproto();
void protobuf_ShutdownFile_bondquote_2eproto();

class BondQuote;

// ===================================================================

class BondQuote : public ::google::protobuf::Message {
 public:
  BondQuote();
  virtual ~BondQuote();

  BondQuote(const BondQuote& from);

  inline BondQuote& operator=(const BondQuote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondQuote& default_instance();

  void Swap(BondQuote* other);

  // implements Message ----------------------------------------------

  BondQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BondQuote& from);
  void MergeFrom(const BondQuote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ask = 1;
  inline bool has_ask() const;
  inline void clear_ask();
  static const int kAskFieldNumber = 1;
  inline double ask() const;
  inline void set_ask(double value);

  // optional double bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline double bid() const;
  inline void set_bid(double value);

  // optional double mid = 3;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 3;
  inline double mid() const;
  inline void set_mid(double value);

  // optional string cusip = 4;
  inline bool has_cusip() const;
  inline void clear_cusip();
  static const int kCusipFieldNumber = 4;
  inline const ::std::string& cusip() const;
  inline void set_cusip(const ::std::string& value);
  inline void set_cusip(const char* value);
  inline void set_cusip(const char* value, size_t size);
  inline ::std::string* mutable_cusip();
  inline ::std::string* release_cusip();
  inline void set_allocated_cusip(::std::string* cusip);

  // @@protoc_insertion_point(class_scope:BondQuote)
 private:
  inline void set_has_ask();
  inline void clear_has_ask();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_cusip();
  inline void clear_has_cusip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double ask_;
  double bid_;
  double mid_;
  ::std::string* cusip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bondquote_2eproto();
  friend void protobuf_AssignDesc_bondquote_2eproto();
  friend void protobuf_ShutdownFile_bondquote_2eproto();

  void InitAsDefaultInstance();
  static BondQuote* default_instance_;
};
// ===================================================================


// ===================================================================

// BondQuote

// optional double ask = 1;
inline bool BondQuote::has_ask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondQuote::set_has_ask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondQuote::clear_has_ask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondQuote::clear_ask() {
  ask_ = 0;
  clear_has_ask();
}
inline double BondQuote::ask() const {
  return ask_;
}
inline void BondQuote::set_ask(double value) {
  set_has_ask();
  ask_ = value;
}

// optional double bid = 2;
inline bool BondQuote::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BondQuote::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BondQuote::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BondQuote::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline double BondQuote::bid() const {
  return bid_;
}
inline void BondQuote::set_bid(double value) {
  set_has_bid();
  bid_ = value;
}

// optional double mid = 3;
inline bool BondQuote::has_mid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BondQuote::set_has_mid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BondQuote::clear_has_mid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BondQuote::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline double BondQuote::mid() const {
  return mid_;
}
inline void BondQuote::set_mid(double value) {
  set_has_mid();
  mid_ = value;
}

// optional string cusip = 4;
inline bool BondQuote::has_cusip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BondQuote::set_has_cusip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BondQuote::clear_has_cusip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BondQuote::clear_cusip() {
  if (cusip_ != &::google::protobuf::internal::kEmptyString) {
    cusip_->clear();
  }
  clear_has_cusip();
}
inline const ::std::string& BondQuote::cusip() const {
  return *cusip_;
}
inline void BondQuote::set_cusip(const ::std::string& value) {
  set_has_cusip();
  if (cusip_ == &::google::protobuf::internal::kEmptyString) {
    cusip_ = new ::std::string;
  }
  cusip_->assign(value);
}
inline void BondQuote::set_cusip(const char* value) {
  set_has_cusip();
  if (cusip_ == &::google::protobuf::internal::kEmptyString) {
    cusip_ = new ::std::string;
  }
  cusip_->assign(value);
}
inline void BondQuote::set_cusip(const char* value, size_t size) {
  set_has_cusip();
  if (cusip_ == &::google::protobuf::internal::kEmptyString) {
    cusip_ = new ::std::string;
  }
  cusip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BondQuote::mutable_cusip() {
  set_has_cusip();
  if (cusip_ == &::google::protobuf::internal::kEmptyString) {
    cusip_ = new ::std::string;
  }
  return cusip_;
}
inline ::std::string* BondQuote::release_cusip() {
  clear_has_cusip();
  if (cusip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cusip_;
    cusip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BondQuote::set_allocated_cusip(::std::string* cusip) {
  if (cusip_ != &::google::protobuf::internal::kEmptyString) {
    delete cusip_;
  }
  if (cusip) {
    set_has_cusip();
    cusip_ = cusip;
  } else {
    clear_has_cusip();
    cusip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bondquote_2eproto__INCLUDED
