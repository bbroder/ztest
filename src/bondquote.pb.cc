// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bondquote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bondquote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BondQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BondQuote_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bondquote_2eproto() {
  protobuf_AddDesc_bondquote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bondquote.proto");
  GOOGLE_CHECK(file != NULL);
  BondQuote_descriptor_ = file->message_type(0);
  static const int BondQuote_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, cusip_),
  };
  BondQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BondQuote_descriptor_,
      BondQuote::default_instance_,
      BondQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BondQuote));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bondquote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BondQuote_descriptor_, &BondQuote::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bondquote_2eproto() {
  delete BondQuote::default_instance_;
  delete BondQuote_reflection_;
}

void protobuf_AddDesc_bondquote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017bondquote.proto\"A\n\tBondQuote\022\013\n\003ask\030\001 "
    "\001(\001\022\013\n\003bid\030\002 \001(\001\022\013\n\003mid\030\003 \001(\001\022\r\n\005cusip\030\004"
    " \001(\t", 84);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bondquote.proto", &protobuf_RegisterTypes);
  BondQuote::default_instance_ = new BondQuote();
  BondQuote::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bondquote_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bondquote_2eproto {
  StaticDescriptorInitializer_bondquote_2eproto() {
    protobuf_AddDesc_bondquote_2eproto();
  }
} static_descriptor_initializer_bondquote_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BondQuote::kAskFieldNumber;
const int BondQuote::kBidFieldNumber;
const int BondQuote::kMidFieldNumber;
const int BondQuote::kCusipFieldNumber;
#endif  // !_MSC_VER

BondQuote::BondQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BondQuote::InitAsDefaultInstance() {
}

BondQuote::BondQuote(const BondQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BondQuote::SharedCtor() {
  _cached_size_ = 0;
  ask_ = 0;
  bid_ = 0;
  mid_ = 0;
  cusip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BondQuote::~BondQuote() {
  SharedDtor();
}

void BondQuote::SharedDtor() {
  if (cusip_ != &::google::protobuf::internal::kEmptyString) {
    delete cusip_;
  }
  if (this != default_instance_) {
  }
}

void BondQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BondQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BondQuote_descriptor_;
}

const BondQuote& BondQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bondquote_2eproto();
  return *default_instance_;
}

BondQuote* BondQuote::default_instance_ = NULL;

BondQuote* BondQuote::New() const {
  return new BondQuote;
}

void BondQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ask_ = 0;
    bid_ = 0;
    mid_ = 0;
    if (has_cusip()) {
      if (cusip_ != &::google::protobuf::internal::kEmptyString) {
        cusip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BondQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bid;
        break;
      }

      // optional double bid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mid;
        break;
      }

      // optional double mid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cusip;
        break;
      }

      // optional string cusip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cusip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cusip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cusip().data(), this->cusip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BondQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ask(), output);
  }

  // optional double bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid(), output);
  }

  // optional double mid = 3;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mid(), output);
  }

  // optional string cusip = 4;
  if (has_cusip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cusip().data(), this->cusip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cusip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BondQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ask(), target);
  }

  // optional double bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bid(), target);
  }

  // optional double mid = 3;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mid(), target);
  }

  // optional string cusip = 4;
  if (has_cusip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cusip().data(), this->cusip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cusip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BondQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double ask = 1;
    if (has_ask()) {
      total_size += 1 + 8;
    }

    // optional double bid = 2;
    if (has_bid()) {
      total_size += 1 + 8;
    }

    // optional double mid = 3;
    if (has_mid()) {
      total_size += 1 + 8;
    }

    // optional string cusip = 4;
    if (has_cusip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cusip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BondQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BondQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BondQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BondQuote::MergeFrom(const BondQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_cusip()) {
      set_cusip(from.cusip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BondQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BondQuote::CopyFrom(const BondQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondQuote::IsInitialized() const {

  return true;
}

void BondQuote::Swap(BondQuote* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(bid_, other->bid_);
    std::swap(mid_, other->mid_);
    std::swap(cusip_, other->cusip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BondQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BondQuote_descriptor_;
  metadata.reflection = BondQuote_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
